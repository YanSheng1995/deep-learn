#!/usr/local/bin/python3# -*- coding: UTF-8 -*-import osimport structimport numpy as npimport urllib.requestfrom matplotlib import pyplot as pltimport gzipimport pandas as pd# 以上部分是整个模型引用的软件包'''读取mnist数据文件。如果本地文件不存在，则从网络上下载并且保存到本地。:param data_type: 要读取的数据文件类型，包括"train"和"t10k"两种，分别代表训练数据和测试数据。:Returns: 图片和图片的标签。图片是以张量形式保存的。'''def read_mnist_data(data_type="train"):    img_path = ('./mnist/%s-images-idx3-ubyte.gz' % data_type)    label_path = ('./mnist/%s-labels-idx1-ubyte.gz' % data_type)        # 如果本地文件不存在，那么，从网络上下载mnist数据    if not os.path.exists(img_path) or not os.path.exists(label_path) :        # 确保./mnist/目录存在，如果不存在，就自动创建此目录        if not os.path.isdir("./mnist/"):            os.mkdir("./mnist/")                    # 从网上下载图片数据，并且，保存到本地文件        img_url = ('http://yann.lecun.com/exdb/mnist/%s-images-idx3-ubyte.gz' % data_type)        print("下载：%s" % img_url)        urllib.request.urlretrieve(img_url, img_path)        print("保存到：%s" % img_path)        # 从网上下载标签数据，并且保存到本地        label_url = ('http://yann.lecun.com/exdb/mnist/%s-labels-idx1-ubyte.gz' % data_type)        print("下载：%s" % label_url)        urllib.request.urlretrieve(label_url, label_path)        print("保存到：%s" % label_path)        # 使用gzip读取标签数据文件    print("\n读取文件：%s" % label_path)    with gzip.open(label_path, 'rb') as label_file:        # 按照大端在前（big-endian）读取两个32位的整数，所以，总共读取8个字节        # 分别是magic number、n_labels(标签的个数)        magic, n_labels = struct.unpack('>II', label_file.read(8))        print("magic number：%d，期望标签个数：%d 个" % (magic, n_labels))        # 将剩下所有的数据按照byte的方式读取        labels = np.frombuffer(label_file.read(), dtype=np.uint8)        print ("实际读取到的标签：%d 个" % len(labels))    # 使用gzip读取图片数据文件    print("\n读取文件：%s" % img_path)    with gzip.open(img_path, 'rb') as img_file:        # 按照大端在前（big-endian）读取四个32位的整数，所以，总共读取16个字节        magic, n_imgs, n_rows, n_cols = struct.unpack(">IIII", img_file.read(16))        # 分别是magic number、n_imgs(图片的个数)、图片的行列的像素个数（n_rows, n_cols ）        print("magic number：%d，期望图片个数：%d个" % (magic, n_imgs))        print("图片长宽：%d × %d 个像素" % (n_rows, n_cols))                # 读取剩下所有的数据，按照 labels * 784 重整形状，其中 784 = 28 × 28 （长×宽）        images = np.frombuffer(img_file.read(), dtype=np.uint8).reshape(n_imgs, n_rows, n_cols)        print ("实际读取到的图片：%d 个" % len(images))     # Labels的数据类型必须转换成为int32    return images, labels.astype(np.int32)# 手写数字计算机眼里什么样？def mnist_5_csv():    # 需要调用read_mnist_data，该函数在上一节的MNIST数据展示中已经出现过    images, labels = read_mnist_data()        # 我们读取训练数据中的第一个图片    # 它是以一个28 × 28张量形式保存的，每个元素的数值代表一个像素    # 像素的取值0~255，数值越大，代表颜色越深    # 其中0代表白色（背景色），255代表黑色（前景色）    img = images[0]        # 将这个图片的每个像素读取出来，逐行转换成字符串，保存到csv文件中    img_csv_value = ""    for n_row in range(0, 28):        for n_col in range(0, 28):            img_csv_value += str(img[n_row][n_col])            # 在每一列后面增加一个逗号分隔符            if (n_col != 27):                img_csv_value += ","                # 在每一行后面增加换行符，将图片的所有元素逐行转换成csv        img_csv_value += "\n"        # 将字符串写入到CSV文件    # 确保./data/存在，如果不存在，就自动创建此目录    if not os.path.isdir("./data/"):            os.mkdir("./data/")    with open('./data/mnist_number_5.csv', 'w') as csv_file:        csv_file.write(img_csv_value)        csv_file.close()# 将mnist数据集中的数字5保存成CSV格式mnist_5_csv()